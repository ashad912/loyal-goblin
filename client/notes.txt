 const missionList = missionListData ? (
        missionListData.map(mission => {
            return(
                <VisibilitySensor key={mission.id}>
                {({isVisible}) =>
                    {return isVisible && 
                        <ListItem alignItems="flex-start" >
                            <ListItemAvatar>
                                <Avatar alt="avatar" src={mission.avatar} />
                            </ListItemAvatar>
                            <ListItemText
                                primary={mission.title}
                                secondary={
                                    <React.Fragment>
                                    <Typography
                                        component="span"
                                        variant="body2"
                                        className={classes.inline}
                                        color="textPrimary"
                                    >
                                        {mission.description}
                                    </Typography>
                                    {mission.amutets ? (mission.amulets.map(amulet => `${amulet.name} `)):(null)}
                                    </React.Fragment>
                                }
                            />
                        </ListItem>       
                    }
                }   
                </VisibilitySensor>
            )
        })
    ) : ( null )










    const missionList =  missionListData ? (
            missionListData.map(mission => {
                console.log(mission)
                return (  
                <React.Fragment>  
                    <ListItem alignItems="flex-start" >
                        <ListItemAvatar>
                            <Avatar alt="avatar" src={mission.avatar.avatarTemp} />
                        </ListItemAvatar>
                        <ListItemText
                            primary={mission.title}
                            secondary={
                                <React.Fragment>
                                <Typography
                                    component="span"
                                    variant="body2"
                                    className={classes.inline}
                                    color="textPrimary"
                                >
                                    {mission.description}
                                </Typography>
                                {mission.amutets ? (mission.amulets.map(amulet => `${amulet.name} `)):(null)}
                                </React.Fragment>
                            }
                        />
                    </ListItem>
                    <Divider variant="inset" component="li" />       
                </React.Fragment>       
                )
        })
    ) : ( null )


    <Grid
                
                container
                direction="column"
                justify="center"
                alignItems="center"
                className={classes.wrapper}
                spacing={2}
            > 
            {party.map((user) => {
                return(
                    <Grid
                        key={user.user._id}
                        container
                        direction="row"
                        justify="center"
                        alignItems="center"
                        className={classes.wrapper}
                        spacing={2}
                    > 
                    {user.inRoom ? (
                        <React.Fragment>
                            <Grid item xs={3}>
                                <Paper className={classes.avatarPaper} >{altAvatar(user.user)}</Paper>
                            </Grid>
                            <Grid item xs={9}>
                                <Paper className={classes.userPaper}>
                                    <Grid
                                        container
                                        direction="row"
                                        justify="flex-start"
                                        alignItems="flex-start"
                                        className={classes.wrapper}
                                        spacing={1}
                                    >
                                    {instanceItems.map((item) => {
                                        
                                        return(
                                            <React.Fragment key={item._id}>
                                                {item.owner === user.user._id ? (
                                                    <img style={{height: 30, width:30}} src={require(`../../../../assets/icons/items/${item.model.imgSrc}`)} alt='icon'/>
                                                ) : (
                                                    null
                                                )}
                                            </React.Fragment>
                                        )
                                        
                                            
                                            /*<img style={{height: 40, width:40}} src={require(`../../../../assets/icons/items/${item.model.imgSrc}`)} alt='icon'/>*/
                                        
                                    })}
                                    </Grid>
                                </Paper>
                            </Grid>
                        </React.Fragment>
                    ) : (
                        <React.Fragment>
                            <Grid item xs={3}>
                            <Paper className={classes.paper}>...</Paper>
                            </Grid>
                            <Grid item xs={9}>
                            <Paper className={classes.paper}>...</Paper>
                            </Grid>
                        </React.Fragment>
                    )}   
                    </Grid>
                )
            })}
            </Grid>


//mission

            <RootDiv>
            <Typography variant="h5">Dru≈ºyna:</Typography>
            <StyledGrid
                
                container
                direction="column"
                justify="center"
                alignItems="center"
                
                spacing={2}
            > 
            {party.map((user) => {
                return(
                    <StyledContainer>
                    
                    <Grid
                        key={user.user._id}
                        container
                        direction="row"
                        spacing={2}
                        
                    > 
                    
                    {user.inRoom ? (
                        <React.Fragment>
                            <Grid item xs={3}>
                                {altAvatar(user.user)}
                            </Grid>
                            <Grid item xs={8}>
                                
                                    <Grid
                                        container
                                        direction="row"
                                        justify="flex-start"
                                        alignItems="flex-start"
                                        spacing={1}
                                    >
                                    {instanceItems.map((item) => {
                                        
                                        return(
                                            <React.Fragment key={item._id}>
                                                {item.owner === user.user._id ? (
                                                    <StyledImage  src={require(`../../../../assets/icons/items/${item.model.imgSrc}`)} alt='icon'/>
                                                ) : (
                                                    null
                                                )}
                                            </React.Fragment>
                                        )
                                        
                                            
                                            /*<img style={{height: 40, width:40}} src={require(`../../../../assets/icons/items/${item.model.imgSrc}`)} alt='icon'/>*/
                                        
                                    })}
                                    </Grid>
                                
                            </Grid>
                            <Grid item xs={1}>
                                    {statusIcon(user.readyStatus)}
                            </Grid>
                        </React.Fragment>
                        
                    ) : (
                        <React.Fragment>
                            <Grid item xs={3}>...</Grid>
                            <Grid item xs={8}></Grid>
                            <Grid item xs={1}>
                                {statusIcon(user.readyStatus)}
                            </Grid>
                        </React.Fragment>
                    )}   
                    
                    
                    </Grid>
                    </StyledContainer>
                )
            })}
            </StyledGrid>
                
            
        </RootDiv>


        //backup newperk

        import React from "react";
import Button from "@material-ui/core/Button";
import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogContent from "@material-ui/core/DialogContent";
import DialogTitle from "@material-ui/core/DialogTitle";
import FormControl from "@material-ui/core/FormControl";
import InputLabel from "@material-ui/core/InputLabel";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import TextField from "@material-ui/core/TextField";
import Grid from "@material-ui/core/Grid";
import Switch from "@material-ui/core/Switch";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import List from "@material-ui/core/List";
import ListItem from "@material-ui/core/ListItem";
import ListItemSecondaryAction from "@material-ui/core/ListItemSecondaryAction";
import ListItemText from "@material-ui/core/ListItemText";
import ListItemAvatar from "@material-ui/core/ListItemAvatar";
import Typography from "@material-ui/core/Typography";
import Input from "@material-ui/core/Input";
import Checkbox from "@material-ui/core/Checkbox";
import uuid from 'uuid/v1'


const perkTypes = [
  "attr-strength",
  "attr-dexterity",
  "attr-magic",
  "attr-endurance",
  "experience",
  "disc-product",
  "disc-category",
  "disc-rent"
];

const createTempProducts = () => {
  return [{
    _id: 1,
    category: "shot",
    name: "W√≥da",
    description: "nie mam weny",
    price: 7.0,
    imgSrc: "drink.png"
  },
  {
    _id: 2,
    category: "shot",
    name: "Zryje",
    description: "na opisy",
    price: 7.0,
    imgSrc: "drink.png"
  },
  {
    _id: 3,
    category: "shot",
    name: "Banie",
    description: "szot√≥w",
    price: 7.0,
    imgSrc: "drink.png"
  },
  {
    _id: 4,
    category: "shot",
    name: "BW√≥da",
    description: "nie mam weny",
    price: 7.0,
    imgSrc: "drink.png"
  },
  {
    _id: 5,
    category: "shot",
    name: "BZryje",
    description: "na opisy",
    price: 7.0,
    imgSrc: "drink.png"
  }]
}

const productCategories = ['shots', 'drinks', 'beer', 'food', 'alco-free']

const rentRooms = ['medieval', 'post-apo', 'sci-fi']

const days = [null, 'poniedzia≈Çek', 'wtorek', '≈õroda', 'czwartek', 'piƒÖtek', 'sobota', 'niedziela']

class NewPerkModal extends React.Component {

  state = {
    perk:{
      perkType: undefined,
      value: undefined,
      target: undefined,
      time: [/*_id, day, startHour, lengthInHours*/],
    },
    formError: {
      value: undefined
    },
    time: {
      active: false,
      hours: [],
    },
    products: createTempProducts(),
    categories: productCategories,
    rentRooms: rentRooms
    
  }

  componentDidMount = () => {
    console.log('init')
  }

  handleAdd = id => () => {
    this.props.handleAddAmulet(id);
  };

  handleSubtract = id => () => {
    this.props.handleSubtractAmulet(id);
  };

  handleDelete = id => () => {
    this.props.handleDeleteAmulet(id);
  };

  handleChangeQuantity = (e, id) => {
    this.props.handleChangeAmuletQuantity(e, id);
  };

  handleCheckbox = (id, quantity) => () => {
    if (quantity > 0) {
        this.props.handleDeleteAmulet(id);
    } else {
        this.props.handleAddAmulet(id);
    }
  };

  handleChangePerkNameValue = (e) => {
    const name = e.target.name
    const value = e.target.value 

    
    this.setState({
      perk:{
        ...this.state.perk,
        [name]: value
      }     
    }, () => {
      this.callbacksAndValidation(name, value)
    })
  };

  handleChangePerkTimeNameValue = (e, index) => {
    const name = e.target.name
    const value = e.target.value 

    const time = this.state.perk.time;
    time[index][name] = value

    this.setState({
      perk:{
        ...this.state.perk,
        time: time   
      }     
    }, () => {
      this.callbacksAndValidation(name, value, index)
    })
  };

  callbacksAndValidation = (fieldName, fieldValue, index, periodId) => {
    
    switch(fieldName) {
      case 'perkType':
        this.setState({
          perk: {
            ...this.state.perk,
            target: undefined,
          }
        })
        break
      case 'value':
        let valueValid = true
        let valueError = ''

        if(fieldValue.length > 0){
          valueValid = fieldValue.trim().match(/^[-+]?[0-9]*%?$/);
          valueError = valueValid ? undefined : 'Niepoprawna warto≈õƒá!'
        }else{
          valueValid = true
          valueError = undefined
        }
        this.setState({
          formError: {
              ...this.state.formError,
              value: valueError
          },
          
        });
        break
      case 'startDay':
        const time = this.state.perk.time
        if(index !== -1 && time[index].startHour === undefined){
          time[index].startHour = 12;
          time[index].lengthInHours = 24;
        }

        this.setState({
          perk: {
              ...this.state.perk,
              time: time
          },
          
        });
      case 'flag':
        const gotTime = this.state.perk.time
        const gotIndex = this.state.perk.time.findIndex(period => period._id === periodId)
        if(gotIndex !== -1 && fieldValue === true){
          gotTime[gotIndex].startHour = 12;
          gotTime[gotIndex].lengthInHours = 24;
        }

        this.setState({
          perk: {
              ...this.state.perk,
              time: gotTime
          },
          
        });
      default:
        break
    }


  }

  handleClose = () => {
    this.setState({
      // perk:{
      //   perkType: undefined,
      //   value: undefined,
      //   target: undefined,
      //   time: [/*day, startHour, lengthInHours*/],
      // }
    }, () => {
      this.props.handleClose()
    })
  }

  handleTogglePerkTimeSetting = (e) => {
    const name = e.target.name

    const newId = uuid()
    this.setState(prevState => {
      return { 
        time: {
          active: !prevState.time.active,
          hours: !prevState.time.active && !prevState.perk.time.length ? [{_id: newId, flag: false}] : prevState.time.hours
        },
        perk: {
          ...this.state.perk,
          time: !prevState.time.active && !prevState.perk.time.length ? [{_id: newId, startDay: 1, startHour: 12, lengthInHours: 24}] : prevState.perk.time
        }
      };
    });
  }

  handleTogglePerkTimeHoursForPeriod = (index, periodId) => {

    const flagToPass = this.state.time.hours[index].flag

    this.setState(prevState => {
      const hours = prevState.time.hours

      hours[index].flag = !hours[index].flag

      return {
        time: {
          ...this.state.time,
          hours: hours
        },
        
      }
    }, () => {
      this.callbacksAndValidation('flag', flagToPass, null, periodId)
    })
  }

  handleAddTimePeriod = () => {
    const newId = uuid()
    const newPeriod = {_id: newId, startDay: 1, startHour: 12, lengthInHours: 24}
    const newTimeFlag = {_id: newId, flag: false}
    this.setState({
      perk: {
        ...this.state.perk,
        time: [...this.state.perk.time, newPeriod]
      },
      time:{
        ...this.state.time,
        hours: [...this.state.time.hours, newTimeFlag]
      } 

    })
  }

  handleDeleteTimePeriod = (id) => {
    console.log(id)
    const time = this.state.perk.time.filter((period)=> {
      return period._id !== id
    })
    console.log(time)
    const hours = this.state.time.hours.filter((hour) => {
      return hour._id !== id
    })
    console.log(hours)
    this.setState({
      perk: {
        ...this.state.perk,
        time: time
      },
      time:{
        ...this.state.time,
        hours: hours
      }

    })

  }
  render(){
/*
    const createMakeList = (perkType) => {
      console.log('createHalo')
      switch(perkType){
        case 'disc-product':
          const products = this.state.products
          console.log(this.state.products)
          products.map((product) => {
            return(
              <MenuItem value={product.name}>{product.name}</MenuItem>
            )
          })
        break
        case 'disc-category':
          const categories = this.state.categories
          categories.map((category) => {
            return(
              <MenuItem value={category}>{category}</MenuItem>
            )
          })
        case 'disc-rent':
          const rentRooms = this.state.rentRooms
          rentRooms.map((room) => {
            return(
              <MenuItem value={room}>{room}</MenuItem>
            )
          })
        default:
          break
      }
    }
*/

const createMakeList = (perkType) => {
  console.log('createHalo')
  switch(perkType){
    case 'disc-product':
      return(
      <FormControl >
            <InputLabel htmlFor="target">Zakres zni≈ºki</InputLabel>
            <Select
                value={this.state.perk.target}
                onChange={this.handleChangePerkNameValue}
                inputProps={{
                    name: 'target',
                    id: 'target',
                }}
            >
            {this.state.products.map((product) => {
              return(
                <MenuItem value={product.name}>{product.name}</MenuItem>
              )
            })}
            </Select>
      </FormControl>
      )
    break
    case 'disc-category':
      return(
        <FormControl >
          <InputLabel htmlFor="target">Zakres zni≈ºki</InputLabel>
          <Select
              value={this.state.perk.target}
              onChange={this.handleChangePerkNameValue}
              inputProps={{
                  name: 'target',
                  id: 'target',
              }}
          >
          {this.state.categories.map((category) => {
            return(
              <MenuItem value={category}>{category}</MenuItem>
            )
          })}
          </Select>
        </FormControl>
      )
    case 'disc-rent':
      return(
        <FormControl >
          <InputLabel htmlFor="target">Zakres zni≈ºki</InputLabel>
          <Select
              value={this.state.perk.target}
              onChange={this.handleChangePerkNameValue}
              inputProps={{
                  name: 'target',
                  id: 'target',
              }}
          >
          {this.state.rentRooms.map((room) => {
            return(
              <MenuItem value={room}>{room}</MenuItem>
            )
          })}
          </Select>
        </FormControl>
      )
    default:
      break
  }
}

const createNumberList = (startNum, endNum, isWeekDay, isHour) => {
  let numArray=[];
  for(let i=startNum; i < endNum+1; i++) {
    numArray=[...numArray, i]
  }
  return numArray.map((num)=>{
    return(
      <MenuItem value={num}>{isWeekDay ? (days[num]): (isHour ? (`${num}:00`) : (num))}</MenuItem>
    )
  })
  
}


    {/* <FormControl >
                    <InputLabel htmlFor="target">Zakres zni≈ºki</InputLabel>
                    <Select
                        value={this.state.perk.target}
                        onChange={this.handleChangeNameValue}
                        inputProps={{
                            name: 'target',
                            id: 'target',
                        }}
                    >
                    {createMakeList(this.state.perk.perkType)} 
                    </Select>
              </FormControl> */}

  return (
    <div>
    
      <Dialog
        open={this.props.open}
        onClose={this.handleClose}
        fullWidth
        maxWidth="md"
      >
        <DialogTitle>Efekt przedmiotu</DialogTitle>
        <DialogContent>
          <Grid container>
          <FormControl >
            <InputLabel htmlFor="perkType">Typ</InputLabel>
            <Select
              autoFocus
                value={this.state.perk.perkType}
                onChange={this.handleChangePerkNameValue}
                inputProps={{
                    name: 'perkType',
                    id: 'perkType',
                }}
            >
                {perkTypes.map((perkType) => {
                    return (
                        <MenuItem value={perkType}>{perkType}</MenuItem>
                    )
                })}
            </Select>
          </FormControl>
          {this.state.perk.perkType ? (
            <React.Fragment>
            <TextField
              value={this.state.perk.value}
              error={this.state.formError.value}
              name="value"
              margin="dense"
              label={`Modyfikator efektu`}
              type="text"
              helperText={this.state.formError.value ? (this.state.formError.value) : ("Procenty lub warto≈õci bezwzglƒôdne (ca≈Çkowite): 10%, -5%, +1, -50")}
              onChange={this.handleChangePerkNameValue}
            />
            {this.state.perk.perkType.includes("disc") ? ( 
              createMakeList(this.state.perk.perkType)
            ) : (null)}
            </React.Fragment>
          ) : (
            null
          )}

          </Grid>
          <Grid container justify="space-around">
            <Grid component="label" container alignItems="center" spacing={1}>
              <Grid item>Efekt sta≈Çy</Grid>
              <Grid item>
                  <Switch
                      name='active'
                      checked={this.state.time.active}
                      onChange={this.handleTogglePerkTimeSetting}
                  />
              </Grid>
              <Grid item>Efekt czasowy</Grid>
            </Grid>
          {this.state.time.active ? ( 
            <React.Fragment>
              {this.state.perk.time.map((period, index) => {

                const timeIndex = this.state.time.hours.findIndex(hour => hour._id === period._id)

                return(
                <Grid container style={{margin: '1rem 0 1rem 0'}}>
                <Grid item>
                <FormControl style={{width: '70%'}}>
                      <InputLabel htmlFor="target">Dzie≈Ñ cyklicznej aktywacji efektu</InputLabel>
                      <Select
                          
                          value={period.startDay}
                          onChange={(e) => this.handleChangePerkTimeNameValue(e, index)}
                          inputProps={{
                              name: 'startDay',
                              id: 'startDay',
                          }}
                      >
                      {createNumberList(1, 7, true)}
                      </Select>
                </FormControl>
                <FormControlLabel
                    control={
                      <Checkbox
                        name='hours'
                        checked={this.state.time.hours[timeIndex].flag}
                        onChange={() => this.handleTogglePerkTimeHoursForPeriod(timeIndex, period._id)}
                      />
                    }
                    label="Precyzuj godziny dzia≈Çania"
                />

                </Grid>
                {this.state.time.hours[timeIndex].flag ? ( 
                  <React.Fragment >
                  <Grid item style={{width: '70%'}}>
                  <FormControl style={{width: '70%'}}>
                        <InputLabel htmlFor="target">Godzina cyklicznej aktywacji efektu</InputLabel>
                        <Select
                            value={period.startHour}
                            onChange={(e) => this.handleChangePerkTimeNameValue(e, index)}
                            inputProps={{
                                name: 'startHour',
                                id: 'startHour',
                            }}
                        >
                        {createNumberList(0, 23, false, true)}
                        </Select>
                  </FormControl>
                  </Grid>
                  
                  <Grid item style={{width: '70%'}}>
                  <FormControl style={{width: '70%'}}>
                        <InputLabel htmlFor="target">D≈Çugo≈õƒá cyklicznego trwania efektu [h]</InputLabel>
                        <Select
                            value={period.lengthInHours}
                            onChange={(e) => this.handleChangePerkTimeNameValue(e, index)}
                            inputProps={{
                                name: 'lengthInHours',
                                id: 'lengthInHours',
                            }}
                        >
                        {createNumberList(1, 24)}
                        </Select>
                  </FormControl>
                  </Grid>
                  </React.Fragment>
                ) : (null)}
                {this.state.perk.time.length > 1 ? (
                  <Grid item>
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={() => this.handleDeleteTimePeriod(period._id)}
                    >
                      Usu≈Ñ
                    </Button>
                </Grid>
                ) : (null)}
                
                </Grid>
              )})}
            </React.Fragment>
          ):(null)}
          <Grid container spacing={2}>
            <Grid item>
              <Button
                variant="contained"
                color="primary"
                onClick={this.handleAddTimePeriod}
              >
                Dodaj efekt przedmiotu
              </Button>
            </Grid>
          </Grid>
          </Grid>
            
          
        </DialogContent>
        <DialogActions>
          <Button onClick={this.handleClose} color="primary">
            Zamknij
          </Button>
        </DialogActions>
      </Dialog>
      
    </div>
  );
};
}

export default NewPerkModal;

//stare torpedy
<React.Fragment >
                <ListItem onClick={handleOpenList} data-value={"Torpedy"}>
                <ListItemText primary={'Torpedy'} />
                {openList === 'Torpedy' ? <ExpandLess /> : <ExpandMore />}
                </ListItem>
                <Collapse
                    in={openList === 'Torpedy'}
                    timeout="auto"
                    unmountOnExit
                >
                <List component="div" disablePadding>
                    {props.userTorpedos.map(item => (
                        <TorpedoListItem key={item.itemModel._id} item={item} loadedTorpedoId={activeTorpedo} handleTorpedoToggle={handleTorpedoToggle} handleItemDelete={handleShowDeleteDialog}/>
                    ))}
                </List>
                </Collapse>
            </React.Fragment>





            {/* <Grid item xs={12}>
              <StyledPaper elevation={0}>
                  <HeadersContainer>
                      <Typography style={{width: '100%', color: 'rgba(0, 0, 0, 0.54)', fontSize: '0.8rem'}}>
                      <Grid container>
                        <Grid item xs={3}>
                          Typ efektu
                        </Grid>
                        <Grid item xs={2}>
                          Efekt
                        </Grid>
                        <Grid item xs={1}>
                          Zakres zni≈ºki
                        </Grid>
                        <Grid item xs={3}>
                          {'Czas(y) dzia≈Çania efektu'}
                        </Grid>
                        <Grid item xs={1}>
                        </Grid>
                        <Grid item xs={2}>
                        </Grid>
                      </Grid>
                      </Typography>
                  </HeadersContainer>
                  <List dense style={{maxHeight: '8rem', overflow: 'auto', width: '100%'}}>
                    
                      {this.state.perks.map((perk, index) => {
                          console.log(perk)
                          return(
                            <StyledBox border={1} borderColor="primary.main">
                              <ListItem>
                                <Typography style={{width: '100%', fontSize: '0.8rem', textAlign: 'center'}} >
                                <Grid container>
                                  <Grid item xs={3}>
                                    {convertToPerkLabel(perk.perkType)}
                                  </Grid>
                                  <Grid item xs={2}>
                                    {perk.value}
                                  </Grid>
                                  <Grid item xs={1}>
                                    {perk.target ? (perk.target.name ? (perk.target.name) : (perk.target)) : (null)}
                                  </Grid>
                                  <Grid item xs={3}>
                                    {perk.time.length ? (
                                      <React.Fragment>
                                        {perk.time.slice().reverse().map((period)=>(
                                        <Grid container style={{justifyContent: 'center'}}>
                                          <Grid item>
                                            {`${days[period.startDay]}`}
                                          </Grid>
                                          {!(period.startHour === 12 && period.lengthInHours === 24) ? (
                                            <Grid item>
                                              {`, ${period.startHour}:00 - ${getEndHour(period.startHour, period.lengthInHours)}:00`}
                                            </Grid>
                                          ) : (
                                            null
                                          )}
                                        </Grid>
                                        ))}
                                      </React.Fragment>
                                    ) : (
                                      <span>Sta≈Çy</span>
                                    )}
                                    
                                  </Grid>
                                
                                
                                  <Grid item xs={1}>
                                    
                                  </Grid>
                                  <Grid item xs={2} style={{display: 'flex', justifyContent: 'flex-end'}}>
                                    <Button
                                        style={{marginRight: '0.5rem', height: '2.5rem'}}
                                        variant="contained"
                                        color="primary"
                                        onClick={() => this.handleModifyPerk(index)}>
                                          <CreateIcon />
                                    </Button>
                                    <Button
                                      style={{height: '2.5rem'}}
                                      variant="contained"
                                      color="primary"
                                      onClick={() => this.handleDeletePerk(index)}>
                                          <DeleteIcon />
                                    </Button>
                                  </Grid>
                                </Grid>
                                </Typography>
                              </ListItem>
                              
                              
                              </StyledBox>
                          )
                      })}
                  </List>
                  </StyledPaper>
                  </Grid> */}




                  {/* <Grid item xs={12}>
                    <StyledPaper elevation={0}>
                  
                  <List dense style={{maxHeight: '8rem', overflow: 'auto', width: '100%'}}>
                    
                      {item.perks.map((perk, index) => {
                          console.log(perk)
                          return(
                            <StyledBox border={1} borderColor="primary.main">
                              <ListItem >
                                <Typography style={{width: '100%', fontSize: '0.8rem', textAlign: 'center'}} >
                                <Grid container>
                                  <Grid item xs={4}>
                                    {perk.perkType}
                                  </Grid>
                                  <Grid item xs={2}>
                                    {perk.value}
                                  </Grid>
                                  <Grid item xs={1}>
                                    {perk.target ? (perk.target.name ? (perk.target.name) : (perk.target)) : (null)}
                                  </Grid>
                                  <Grid item xs={5}>
                                    {perk.time.length ? (
                                      <React.Fragment>
                                        {perk.time.map((period)=>(
                                        <Grid container style={{justifyContent: 'center'}}>
                                          <Grid item>
                                            {`${days[period.startDay]}`}
                                          </Grid>
                                          {!(period.startHour === 12 && period.lengthInHours === 24) ? (
                                            <Grid item>
                                              {`, ${period.startHour}:00 - ${getEndHour(period.startHour, period.lengthInHours)}:00`}
                                            </Grid>
                                          ) : (
                                            null
                                          )}
                                        </Grid>
                                        ))}
                                      </React.Fragment>
                                    ) : (
                                      <span>Sta≈Çy</span>
                                    )}
                                    
                                  </Grid>
                                
                                
                                 
                                  
                                </Grid>
                                </Typography>
                              </ListItem>
                              
                              
                              </StyledBox>
                          )
                      })}
                  </List>
                  </StyledPaper>
                  </Grid> */}



                  /*
    const createMakeList = (perkType) => {
      console.log('createHalo')
      switch(perkType){
        case 'disc-product':
          const products = this.state.products
          console.log(this.state.products)
          products.map((product) => {
            return(
              <MenuItem value={product.name}>{product.name}</MenuItem>
            )
          })
        break
        case 'disc-category':
          const categories = this.state.categories
          categories.map((category) => {
            return(
              <MenuItem value={category}>{category}</MenuItem>
            )
          })
        case 'disc-rent':
          const rentRooms = this.state.rentRooms
          rentRooms.map((room) => {
            return(
              <MenuItem value={room}>{room}</MenuItem>
            )
          })
        default:
          break
      }
    }
     <FormControl >
                    <InputLabel htmlFor="target">Zakres zni≈ºki</InputLabel>
                    <Select
                        value={this.state.perk.target}
                        onChange={this.handleChangeNameValue}
                        inputProps={{
                            name: 'target',
                            id: 'target',
                        }}
                    >
                    {createMakeList(this.state.perk.perkType)} 
                    </Select>
              </FormControl> 
*/





 {/* </Typography>
                    <Typography>
                        <Link href='/signin' to='/signin'  nderline='none' style={{color: 'white', marginRight: '1rem'}}>
                            Zaloguj
                        </Link>
                    </Typography>
                    <Typography>
                        <Link href='/signup' to='/signup' underline='none' style={{color: 'white'}}>
                            Do≈ÇƒÖcz
                        </Link>
                    </Typography> */}






                                            {/* <ListItem style={{height: itemLabelHeight, paddingRight: '2rem'}} alignItems="flex-start"> 
                            <ListItemAvatar>
                                <Avatar alt="avatar" src={mission.avatarSrc.avatarTemp} />
                            </ListItemAvatar>
                            <ListItemText
                                primary={
                                    <TitleMissionContainer>
                                    <Typography
                                        component="span"
                                        variant="body1"
                                        color="textPrimary"
                                    >
                                        {mission.title}
                                    </Typography>
                                    <Typography
                                        component="span"
                                        style={{display: 'inline-flex'}}
                                        variant="body2"
                                        color={appropriateLevel ? 'textPrimary' : 'error'}
                                    >
                                        <img style= {{height: 15, width: 15}} src={levelIcon}/>
                                        {`: ${mission.level}`}
                                    </Typography>
                                    <Typography
                                        component="span"
                                        style={{display: 'inline-flex'}}
                                        variant="body2"
                                        color={appropriatePlayers ? 'textPrimary' : 'error'}
                                    >
                                        <img style= {{height: 20, width: 20}} src={playersIcon}/>
                                        {`: ${players(mission.minPlayers, mission.maxPlayers)}`}
                                    </Typography>
                                    </TitleMissionContainer>
                                }
                                secondary={
                                    <React.Fragment>
                                    <Typography
                                        component="span"
                                        variant="body2"
                                        style={{display: 'block'}}
                                        color="textPrimary"
                                    >
                                        {mission.description}
                                    </Typography>
                                    <br />
                                    
                                    
                                    {`A: `}
                                    {mission.amulets ? (
                                        mission.amulets.map(amulet => {
                                            //TODO: Fix problem with webpack.
                                            //console.log(`../../assets/icons/${amulet.itemModel.imgSrc}`) //this works
                                            //console.log(`${pathToIcons}${amulet.itemModel.imgSrc}`) // does not work
                                            //console.log(pathToIcons + amulet.itemModel.imgSrc) //does not work

                                            
                                            
                                            return(
                                                <React.Fragment key={amulet.itemModel.id}>
                                                    {`${amulet.quantity}x`}
                                                    <img style={{height: 20, width: 20}} src={require(`../../assets/icons/items/${amulet.itemModel.imgSrc}`)} alt='icon'/>
                                                    {` `}
                                                </React.Fragment>
                                                )
                                            })
                                        ):(null)
                                    }
                                    <br />
                                    <RequiredAttribute attr={appropriateStrength} >{`S: ${totalStrength}/${mission.strength}`}</RequiredAttribute>
                                    <RequiredAttribute attr={appropriateDexternity} >{`Z: ${totalDexternity}/${mission.dexternity}`}</RequiredAttribute>
                                    <br />
                                    <RequiredAttribute attr={appropriateMagic} >{`M: ${totalMagic}/${mission.magic}`}</RequiredAttribute> 
                                    <RequiredAttribute attr={appropriateEndurance} >{`W: ${totalEndurance}/${mission.endurance}`}</RequiredAttribute>
                                    </React.Fragment>
                                }  
                            />

                         
                            
                            <ListItemSecondaryAction style={{transform: 'translateY(50%)'}}>
                                <Button size="small" onClick={() => handleMissionClick(mission.id)} disabled={!isMissionActive || !leader}>{leader ? ('Go in!') : ('You are not the leader!')}</Button>
                            </ListItemSecondaryAction>
                            
                            
                        </ListItem> */}
















                        <StyledBox border={1} borderColor="primary.main">

                        <Grid
                            container
                            direction="column"
                            style={{padding: '1rem', textAlign: 'left'}}
                        >
                            <Grid
                                container
                                direction="row"
                            >
                                   
                                <Grid item xs={9}>
                                    <Grid
                                        container
                                        direction="column"
                                        
                                    >
                                        <Grid item style={{marginBottom: '0.5rem'}}>
                                            <Typography
                                                component="span"
                                                variant="h6"
                                                color="textPrimary"
                                            >
                                                {mission.title}
                                            </Typography>
                                        </Grid>
                                        <Grid item>
                                            <ShortDescription
                                                component="span"
                                                variant="body2"
                                                color="textPrimary"
                                            >
                                                {mission.description}
                                            </ShortDescription>
                                        </Grid>
                                    </Grid>   
                                </Grid> 
                                <Grid item xs={3} >
                                    <Grid
                                        container
                                        direction="column"
                                    >
                                        <Grid item style={{display: 'flex', justifyContent: 'flex-end'}}>
                                            <Avatar alt="avatar" style={{width: '3.5rem', height: '4rem'}} src={mission.avatarSrc.avatarTemp} />
                                        </Grid>
                                    </Grid>
                                </Grid> 
                            </Grid>
                            <Grid
                                container
                                direction="row"
                                display="flex"
                                style={{marginTop: '0.5rem'}}
                            >
                                <Grid item xs={0}>

                                </Grid>
                                <Grid item xs={4}>
                                    <Button size="small" color="primary" style={{paddingLeft: '0'}} onClick={() => handleMissionDetailsOpen(index)}>Szczeg√≥≈Çy</Button>
                                </Grid>
                                <Grid item xs={5} style={{display: 'flex', justifyContent: 'flex-end'}}>
                                    <Button size="small" color="primary" style={{textAlign: 'right', paddingRight: '0'}} onClick={() => handleMissionClick(mission.id)} disabled={!isMissionActive || !leader}>Wyrusz!</Button>
                                </Grid>
                            </Grid>
                            <Divider style={{margin: '0.5rem 0'}}/>
                            <Grid
                                container
                                direction="column"
                            >
                                <Grid
                                    container
                                    direction="row"
                                >
                                    
                                    <Grid item>
                                        <Typography
                                            component="span"
                                            variant="body1"
                                            color="textPrimary"
                                            style={{fontWeight: 'bold'}}
                                        >
                                            Wymagania
                                        </Typography>
                                    </Grid> 
                                </Grid>
                                <Grid
                                    container
                                    direction="row"
                                    style={{margin: '0.1rem 0'}}
                                >
                                    
                                    <Grid item xs={3}>
                                    
                                        <Typography
                                            component="span"
                                            style={{display: 'inline-flex'}}
                                            variant="body2"
                                            color={appropriateLevel ? 'textPrimary' : 'error'}
                                        >
                                            {/* <img style= {{height: 20, width: 20}} src={levelIcon}/> */}
                                            {`P: ${mission.level}`}
                                        </Typography>
                                    </Grid>
                                    <Grid item xs={3}>
                                        <Typography
                                            component="span"
                                            style={{display: 'inline-flex'}}
                                            variant="body2"
                                            color={appropriatePlayers ? 'textPrimary' : 'error'}
                                        >
                                            {/* <img style= {{height: 20, width: 20}} src={playersIcon}/> */}
                                            {`G: ${players(mission.minPlayers, mission.maxPlayers)}`}
                                        </Typography>
                                    </Grid>
                                </Grid>
                                <Grid
                                    container
                                    direction="row"
                                    style={{margin: '0.1rem 0'}}
                                >
                                    <Grid item xs={3}>
                                        <RequiredAttribute variant="body2" attr={appropriateStrength} >{`S: ${totalStrength}/${mission.strength}`}</RequiredAttribute>
                                    </Grid>
                                    <Grid item xs={3}>
                                        <RequiredAttribute variant="body2" attr={appropriateDexterity} >{`Z: ${totalDexterity}/${mission.dexterity}`}</RequiredAttribute>
                                    </Grid>
                                    <Grid item xs={3}>
                                        <RequiredAttribute variant="body2" attr={appropriateMagic} >{`M: ${totalMagic}/${mission.magic}`}</RequiredAttribute> 
                                    </Grid>
                                    <Grid item xs={3}>
                                        <RequiredAttribute variant="body2" attr={appropriateEndurance} >{`W: ${totalEndurance}/${mission.endurance}`}</RequiredAttribute>
                                    </Grid>
                                </Grid>
                                <Grid
                                    container
                                    direction="row"
                                    style={{margin: '0.2rem 0'}}
                                >
                                    <Grid item>
                                        <Typography 
                                            variant='body2'
                                            component="span"
                                            style={{display: 'inline-flex', margin: '0 0.3rem 0 0'}}
                                        >
                                        {`A: `}  
                                        </Typography>
                                        
                                        {mission.amulets ? (
                                            mission.amulets.map(amulet => {

                                                return(
                                                    <Typography 
                                                        variant='body2'
                                                        component="span"
                                                        style={{display: 'inline-flex', margin: '0 0.2rem 0 0'}}
                                                        key={amulet.itemModel.id}
                                                    >
                                                        {`${amulet.quantity}x`}
                                                        <img style={{height: 20, width: 20, marginLeft: '0.1rem'}} src={require(`../../assets/icons/items/${amulet.itemModel.imgSrc}`)} alt='icon'/>
                                                        {` `}
                                                    </Typography>
                                                    )
                                                })
                                            ):(null)
                                        }
                                    </Grid>
                                </Grid>
                            </Grid>
                            <Divider style={{margin: '0.5rem 0'}}/>
                            <Grid 
                                container
                                direction='column'
                            >
                                <Grid
                                    container
                                    direction="row"
                                >
                                        
                                    <Grid item>
                                        <Typography
                                            component="span"
                                            variant="body1"
                                            color="textPrimary"
                                            style={{fontWeight: 'bold'}}
                                        >
                                            Nagrody
                                        </Typography>
                                    </Grid> 
                                </Grid>
                                {/*mission.hasOwnProperty('awards') &&*/ Object.keys(mission.awards).map((className)=> {
                                    console.log(className)
                                    return(
                                        <Grid
                                            container
                                            direction="row"
                                            style={{marginBottom: '0.2rem'}}
                                        >
                                            <Grid item xs={4}>
                                            <Typography 
                                                variant='body2'
                                                component="span"
                                                style={{display: 'inline-flex', margin: '0 0.3rem 0 0'}}
                                            >
                                                {`${classLabelsAny[className]}: `} 
                                            </Typography>
                                            </Grid>
                                            <Grid item xs={8} style={{display: 'flex', alignItems: 'center'}}>
                                                {mission.awards[className].length && !mission.awardsAreSecret ? (
                                                    <React.Fragment>
                                                        {mission.awards[className].map((award)=>{
                                                            let copies = []
                                                            for(let i=0; i<award.quantity; i++){
                                                                const copy = <img style={{height: 20, width: 20, marginLeft: '0.1rem'}} src={require(`../../assets/icons/items/${award.itemModel.imgSrc}`)} alt='icon'/>
                                                                copies = [...copies, copy]
                                                            }
                                                            return copies
                                                        })}
                                                    </React.Fragment>
                                                ) : (
                                                    <Typography 
                                                        variant='body2'
                                                        component="span"
                                                        style={{display: 'inline-flex', margin: '0 0.3rem 0 0'}}
                                                    >
                                                        ?
                                                    </Typography>
                                                )
                                                }
                                            </Grid>
                                        </Grid>
                                    )
                                        
                                    })
                                }
                                
                            </Grid>
                        </Grid>
                        </StyledBox>